#!/data/data/com.termux/files/usr/bin/bash

FLAG_FILE="$HOME/.pacotes_instalados"
JAVA_REQUIRED_VERSION="21"

# Fun√ß√£o para verificar vers√£o do Java
verificar_java_versao() {
    if ! command -v java >/dev/null 2>&1; then
        echo "‚ùå Java n√£o est√° instalado."
        return 1
    fi

    # Captura a vers√£o principal do Java (ex: 21 do 21.0.2)
    JAVA_VERSAO=$(java -version 2>&1 | grep "version" | grep -oP '"\K[0-9]+')
    
    if [ "$JAVA_VERSAO" -ge "$JAVA_REQUIRED_VERSION" ]; then
        echo "‚úÖ Java vers√£o $JAVA_VERSAO detectada (requerido: $JAVA_REQUIRED_VERSION+)."
        return 0
    else
        echo "‚ö† Java vers√£o $JAVA_VERSAO detectada. Requer Java $JAVA_REQUIRED_VERSION ou superior."
        return 1
    fi
}

# Instala√ß√£o s√≥ se ainda n√£o foi feita
if [ -f "$FLAG_FILE" ]; then
    echo "‚úÖ Pacotes j√° foram instalados anteriormente. Pulando esta etapa."
else
    echo "üì¶ Atualizando Termux e instalando pacotes necess√°rios..."
    pkg update -y && pkg upgrade -y

    # Fun√ß√£o para instalar um pacote se ele ainda n√£o estiver instalado
    instalar_pacote() {
        if command -v "$1" > /dev/null 2>&1; then
            echo "‚úÖ $1 j√° est√° instalado."
        else
            echo "üì• Instalando $2..."
            pkg install -y "$2"
        fi
    }

    instalar_pacote wget wget
    instalar_pacote zip zip

    # Instalar Java apenas se necess√°rio ou com vers√£o incorreta
    if verificar_java_versao; then
        echo "‚úÖ Java j√° est√° na vers√£o correta."
    else
        echo "üì• Instalando OpenJDK 21..."
        pkg install -y openjdk-21
    fi

    touch "$FLAG_FILE"
    echo "‚úÖ Instala√ß√£o dos pacotes conclu√≠da e registrada."
fi


# Ativar acesso ao armazenamento (exige confirma√ß√£o do usu√°rio)
# Verificar e ativar acesso ao armazenamento (somente se necess√°rio)
if [ ! -d "$HOME/storage" ]; then
    echo "üìÇ Configurando acesso ao armazenamento interno..."
    termux-setup-storage
    echo "‚úÖ Acesso ao armazenamento solicitado. Reinicie o Termux se necess√°rio."
    sleep 2
else
    echo "‚úÖ Acesso ao armazenamento interno j√° est√° configurado."
fi


# Criar start.sh
cd ~/
cat <<EOF > start.sh
#!/data/data/com.termux/files/usr/bin/bash

RED='\\033[0;31m'
NC='\\033[0m'

echo -e "\\n\${RED}Iniciando servidor no diret√≥rio:\${NC} $SERVER_DIR"
cd "$SERVER_DIR"
java -jar server.jar nogui
EOF

chmod +x start.sh

fazer_backup() {
    if [ ! -d "$SERVER_DIR" ]; then
        echo "‚ö† Diret√≥rio do servidor n√£o encontrado: $SERVER_DIR"
        return
    fi

    mkdir -p "$SERVER_DIR/backups"
    local data=$(date +"%Y-%m-%d_%H-%M-%S")
    local arquivo_backup="$SERVER_DIR/backups/ServidorMinecraft_backup_$data.zip"

    echo "Criando backup em $arquivo_backup ..."
    zip -r "$arquivo_backup" "$SERVER_DIR" > /dev/null

    if [ $? -eq 0 ]; then
        echo "‚úÖ Backup criado com sucesso!"
    else
        echo "‚ùå Erro ao criar backup."
    fi
}


# Diret√≥rio onde o servidor ser√° instalado
SERVER_DIR="$HOME/storage/shared/ServidorMinecraft"

if [ -d "$SERVER_DIR" ]; then
    echo "‚úÖ Diret√≥rio do servidor j√° existe: $SERVER_DIR"
else
    echo "üìÅ Criando diret√≥rio do servidor em: $SERVER_DIR"
    mkdir -p "$SERVER_DIR"
fi

cd "$SERVER_DIR" || { echo "‚ùå Erro ao acessar $SERVER_DIR"; exit 1; }


# Lista de vers√µes
declare -A versions
versions["1.21.6"]="https://piston-data.mojang.com/v1/objects/6e64dcabba3c01a7271b4fa6bd898483b794c59b/server.jar"

# Menu principal
while true; do
    echo ""
    echo "==== MENU ===="
    echo "1) Instalar novo servidor"
    echo "2) Iniciar servidor"
    echo "3) Atualizar server.jar"
    echo "4) Excluir mapa do servidor"
    echo "5) Backup do servidor"
    echo "0) Sair"
    echo -n "Escolha uma op√ß√£o: "
    read op

    case "$op" in
    1)
        echo ""
        echo "üì• Selecione a vers√£o do servidor Minecraft:"

        # Listar op√ß√µes numeradas manualmente
        echo "0) Cancelar"
        i=1
        declare -a opcoes
        for ver in "${!versions[@]}"; do
            echo "$i) $ver"
            opcoes[$i]="$ver"
            ((i++))
        done

        # Ler op√ß√£o do usu√°rio
        read -p "Digite o n√∫mero da vers√£o desejada: " escolha

        # Verificar entrada
        if [[ "$escolha" == "0" ]]; then
            echo "‚ùå Instala√ß√£o cancelada."
        elif [[ "$escolha" =~ ^[0-9]+$ ]] && [[ "$escolha" -gt 0 && "$escolha" -lt "$i" ]]; then
            versao_escolhida="${opcoes[$escolha]}"
            echo "‚úÖ Baixando servidor da vers√£o: $versao_escolhida"

            # Criar diret√≥rio se ainda n√£o existir
            if [ ! -d "$SERVER_DIR" ]; then
                mkdir -p "$SERVER_DIR"
                echo "üìÅ Diret√≥rio criado em $SERVER_DIR"
            fi

            cd "$SERVER_DIR" || { echo "‚ùå Erro ao acessar $SERVER_DIR"; exit 1; }

            # Baixar o arquivo do servidor
            wget -O server.jar "${versions[$versao_escolhida]}" || {
                echo "‚ùå Falha ao baixar o server.jar"
                exit 1
            }

            echo "eula=true" > eula.txt
            echo "‚úÖ Instala√ß√£o da vers√£o $versao_escolhida conclu√≠da!"
        else
            echo "‚ùå Op√ß√£o inv√°lida. Opera√ß√£o abortada."
        fi
        ;;

    2)
        if [ -f "$HOME/start.sh" ]; then
            echo "üöÄ Iniciando servidor..."
            bash "$HOME/start.sh"
        else
            echo "‚ùå Arquivo start.sh n√£o encontrado em $HOME"
        fi
        ;;


    3)
        if [[ -f "$SERVER_DIR/server.jar" ]]; then
            echo ""
            echo "server.jar encontrado. Deseja substituir por uma nova vers√£o."
            echo "üì• Selecione a nova vers√£o:"
            select ver in "${!versions[@]}" "Cancelar"; do
                if [[ "$REPLY" -gt 0 && "$REPLY" -le "${#versions[@]}" ]]; then
                    cd "$SERVER_DIR"
                    echo "Removendo server.jar antigo..."
                    rm -f server.jar
                    echo "Baixando nova vers√£o $ver..."
                    wget -O server.jar "${versions[$ver]}"
                    break
                elif [[ "$ver" == "Cancelar" ]]; then
                    echo "Atualiza√ß√£o cancelada."
                    break
                else
                    echo "Op√ß√£o inv√°lida. Tente novamente."
                fi
            done
        else
            echo "‚ö† Nenhum server.jar encontrado em $SERVER_DIR. Use a op√ß√£o 1 para instalar primeiro."
        fi
        ;;

	4)
	    echo -e "${RED}Tem certeza que deseja excluir o mapa atual? Isso n√£o poder√° ser desfeito.${NC}"
		read -p "Digite 'SIM' para confirmar: " confirm
		if [ "$confirm" = "SIM" ]; then
		  cd "$SERVER_DIR"
		  rm -rf world world_nether world_the_end
		  echo "üóëÔ∏è  Mapa removido com sucesso!"
		else
		  echo "‚ùå Opera√ß√£o cancelada."
		fi
		;;
	5) fazer_backup ;;
 	
 	0)
		echo "Saindo..."
		exit 0
		;;
	*)
		echo "‚ùå Op√ß√£o inv√°lida."
		;;
	esac
done

echo ""
echo "‚úÖ Script conclu√≠do."
echo "‚û° Use ./start.sh para iniciar o servidor."
